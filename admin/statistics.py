import asyncpg
from aiogram import Bot
from datetime import datetime
from utils.service_identifier import identify_service
from config import ADMIN_ID

async def get_statistics(pool, date=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è).
    """
    if date is None:
        date = datetime.now().date()

    async with pool.acquire() as conn:
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
        unique_users = await conn.fetchval(
            "SELECT COUNT(DISTINCT user_id) FROM links WHERE DATE(timestamp) = $1", date
        )

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
        unique_chats = await conn.fetchval(
            "SELECT COUNT(DISTINCT chat_id) FROM links WHERE DATE(timestamp) = $1", date
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –∑–∞ –¥–µ–Ω—å
        total_links_today = await conn.fetchval(
            "SELECT COUNT(link) FROM links WHERE DATE(timestamp) = $1", date
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∑–∞ –¥–µ–Ω—å
        success_links_today = await conn.fetchval(
            "SELECT COUNT(link) FROM links WHERE DATE(timestamp) = $1 AND success_send = TRUE", date
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        total_links_all_time = await conn.fetchval("SELECT COUNT(link) FROM links")

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        success_links_all_time = await conn.fetchval(
            "SELECT COUNT(link) FROM links WHERE success_send = TRUE"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        rows = await conn.fetch(
            "SELECT link, success_send FROM links WHERE DATE(timestamp) = $1", date
        )

    return {
        "date": date,
        "unique_users": unique_users or 0,
        "unique_chats": unique_chats or 0,
        "total_links_today": total_links_today or 0,
        "success_links_today": success_links_today or 0,
        "total_links_all_time": total_links_all_time or 0,
        "success_links_all_time": success_links_all_time or 0,
        "links": rows,
    }

async def analyze_services(links_data):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
    """
    services = {
        "YouTube": [0, 0], "YouTubeMusic": [0, 0], "Spotify": [0, 0],
        "TikTok": [0, 0], "Twitter/X": [0, 0], "Instagram": [0, 0],
        "Pinterest": [0, 0], "PornHub": [0, 0], "Twitch": [0, 0], "Another": [0, 0]
    }

    for row in links_data:
        service = await identify_service(row["link"])
        if service in services:
            services[service][0] += 1  # –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫
            if row["success_send"]:
                services[service][1] += 1  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

    return services

async def format_statistics(statistics, services):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —É–¥–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    stats_message = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {statistics['date']}</b>\n\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{statistics['unique_users']}</b>\n"
        f"üí¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã: <b>{statistics['unique_chats']}</b>\n"
        f"üîó –°—Å—ã–ª–æ–∫ –∑–∞ –¥–µ–Ω—å: <b>{statistics['total_links_today']}</b>\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∑–∞ –¥–µ–Ω—å: <b>{statistics['success_links_today']}</b>\n\n"
        f"üìå <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
        f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: <b>{statistics['total_links_all_time']}</b>\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{statistics['success_links_all_time']}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º</b>:\n"
    )

    for service, (total, success) in services.items():
        stats_message += f"üîπ {service}: <b>{total}</b> (‚úÖ {success})\n"

    return stats_message

async def send_statistics(bot: Bot, pool, chat_id=ADMIN_ID, date=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
    """
    statistics = await get_statistics(pool, date)
    services = await analyze_services(statistics["links"])
    stats_message = await format_statistics(statistics, services)

    await bot.send_message(chat_id=chat_id, text=stats_message, parse_mode="HTML")
