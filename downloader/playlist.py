import asyncio
import yt_dlp
import os
import requests
import math
from aiogram import Bot
from aiogram.types import FSInputFile
from downloader.media import del_media_content
from downloader.youtube.youtube import download_thumbnail
from keyboard import generate_playlist_keyboard
from typing import Optional
from user.get_user_path import get_user_path
from utils.spotify_helper import extract_spotify_id, get_spotify_client

PAGE_SIZE = 10

async def process_music_playlist(bot: Bot, chat_id: int, url: str, page: int = 1, msg_id: Optional[int] = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (Spotify, YouTube Music).
    """
    user_folder = await get_user_path(chat_id)
    source = ""
    
    # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (Spotify / YouTube)
    if "spotify" in url:
        playlist_info = await fetch_spotify_data(url, user_folder)
        source = "S"
    else:
        playlist_info = await fetch_youtube_music_playlist(url, user_folder)
        source = "Y"

    if "error" in playlist_info:
        return await bot.send_message(chat_id, playlist_info["error"])

    # üìå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    title = playlist_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    owner = playlist_info.get("owner", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    tracks = playlist_info.get("tracks", [])
    cover_path = playlist_info.get("cover_path", None)
    content_type = playlist_info.get("content_type", "p")
    playlist_id = playlist_info.get("playlist_id", None)
    total_tracks = len(tracks)
    total_pages = max(1, math.ceil(total_tracks / PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start_idx = (page - 1) * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    songs_for_current_page = tracks[start_idx:end_idx]
        

    caption = f"üéµ <b>{title}</b>\nüë§ {owner}\nüìÄ –ü–ª–µ–π–ª–∏—Å—Ç\nüéß –¢—Ä–µ–∫–æ–≤: {total_tracks}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"

    if msg_id is None:
        message = await bot.send_photo(chat_id, photo=FSInputFile(cover_path), caption=caption, parse_mode="HTML")
        msg_id = message.message_id

    msg_id = int(msg_id)
    print(playlist_id)
    inline_keyboard = await generate_playlist_keyboard(songs_for_current_page, chat_id, source, playlist_id, page, total_pages, msg_id, content_type)

    await bot.edit_message_caption(chat_id=chat_id, message_id=msg_id, caption=caption, reply_markup=inline_keyboard, parse_mode="HTML")

    if cover_path:
        await del_media_content(cover_path)

    return msg_id
        

async def fetch_youtube_music_playlist(url: str, user_folder: str) -> dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ YouTube Music.
    """
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'force_generic_extractor': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        if "_type" in info and info["_type"] == "playlist":
            title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            owner = info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
            playlist_id = info.get("id", None)

            # üìå –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
            tracks = [
                {"title": entry["title"], "id": entry["id"]}
                for entry in info.get("entries", []) if entry.get("id")
            ]

            # üìå –û–±–ª–æ–∂–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–ø–æ –ø–µ—Ä–≤–æ–º—É –≤–∏–¥–µ–æ)
            cover_url = f"https://img.youtube.com/vi/{tracks[0]['id']}/maxresdefault.jpg" if tracks else None
            cover_path = os.path.join(user_folder, f"{playlist_id}_thumbnail.jpg")

            if cover_url:
                download_thumbnail(cover_url, cover_path)

            return {
                "title": title,
                "owner": owner,
                "tracks": tracks,
                "cover_path": cover_path,
                "content_type": "–ø–ª–µ–π–ª–∏—Å—Ç",
                "playlist_id": playlist_id
            }
        else:
            return {"error": "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ."}

    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {str(e)}"}
    

async def fetch_spotify_data(url: str, user_folder: str) -> dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏–ª–∏ –∞–ª—å–±–æ–º–µ Spotify.
    """
    spotify = get_spotify_client()
    spotify_id = extract_spotify_id(url)

    try:
        if "album" in url:
            data = spotify.album(spotify_id)
            content_type = "a"
        elif "playlist" in url:
            data = spotify.playlist(spotify_id)
            content_type = "p"
        else:
            return {"error": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL Spotify"}

        # üìå –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        title = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        owner = data["owner"]["display_name"] if "playlist" in url else data["artists"][0]["name"]
        playlist_id = data["id"]  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–µ–π–ª–∏—Å—Ç–∞/–∞–ª—å–±–æ–º–∞
        cover_url = data["images"][0]["url"] if data.get("images") else None
        track_items = data["tracks"]["items"]

        # üìå –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        tracks = []
        for item in track_items:
            track = item["track"] if "playlist" in url else item
            track_name = track["name"]
            artist_name = track["artists"][0]["name"]
            track_id = track["id"]

            tracks.append({"title": f"{artist_name} - {track_name}", "id": track_id})

        # üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
        cover_path = os.path.join(user_folder, f"{spotify_id}_thumbnail.jpg")
        if cover_url:
            download_thumbnail(cover_url, cover_path)

        return {
            "title": title,
            "owner": owner,
            "playlist_id": playlist_id,  # ‚úÖ –¢–µ–ø–µ—Ä—å ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
            "tracks": tracks,
            "cover_path": cover_path,
            "content_type": content_type
        }
    
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Spotify: {str(e)}"}
