import asyncio
from datetime import datetime, timedelta
import logging
from aiogram import Bot, Dispatcher
from asyncpg import Pool

from utils.user_rate import get_active_chats_last_month

async def send_feedback_polls(bot: Bot, pool: Pool):
    try:
        chat_ids = await get_active_chats_last_month(pool)
        print("chats", chat_ids)

        for chat_id in chat_ids:
            try:
                await bot.send_poll(
                    chat_id=chat_id,
                    question="üìù –ù–∞ –∫–∞–∫—É—é –æ—Ü–µ–Ω–∫—É –±–æ—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?",
                    options=["5 - –û—Ç–ª–∏—á–Ω–æ", "4 - –•–æ—Ä–æ—à–æ", "3 - –ù–æ—Ä–º–∞–ª—å–Ω–æ", "2 - –ü–ª–æ—Ö–æ", "1 - –£–∂–∞—Å–Ω–æ"],
                    is_anonymous=False,
                    allows_multiple_answers=False
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}", exc_info=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)


async def daily_feedback_task(bot: Bot, dp: Dispatcher):
    while True:
        now = datetime.now()
        next_midnight = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        wait_seconds = (next_midnight - now).total_seconds()
        
        await asyncio.sleep(wait_seconds)

        try:
            today = datetime.now()
            if today.day == 22:
                pool = dp["db_pool"]
                print("üìä –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–æ–≤...")
                await send_feedback_polls(bot, pool)
            else:
                print("–ù–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ. –û–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ daily_feedback_task: {e}", exc_info=True)